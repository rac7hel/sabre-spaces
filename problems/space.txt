/**
 * Space
 *
 * This domain tells the story of an interstellar explorer, Captain Zoe, who is
 * on a mission to befriend the reptilian guardian of an alien planet. The
 * domain was originally written by Stephen G. Ware in 2012 for an experiment
 * to validate a plan-based model of narrative conflict. It was used in the
 * CPOCL and Glaive narrative planners. It was adapted for Sabre by the same
 * author in 2023. A few changes have been made to allow additional stories:
 * (1) It is now possible to walk between places. There was a bug in the
 *     original domain where it was only possible to walk between landforms,
 *     and since there was only one landform the 'walk' action was never
 *     possible. It is now possible to walk between the Surface and Cave.
 * (2) It is now only possible to teleport between a ship and a landform. In
 *     the original domain, it was possible to teleport between the ship and
 *     any location. This allowed Zoe to teleport directly to the cave, which
 *     generally prevents the surface from being used in any shortest story.
 * (3) Place parameters have been added to the combat actions 'stun' and 'kill'
 *     so that other characters at those locations will observe the actions.
 * (4) The 'make_peace' action now requires the consent of both parties.
 * (5) The original author goal was only that the surface be uninhabitable.
 *     This means no character actions are required to reach a solution. The
 *     original author goal is still present, but there are now others that
 *     reward stories containing character actions:
 *     - The author scores 1 point for the surface being uninhabitable.
 *     - The author scores 1 point if Zoe is dead.
 *     - The author scores 1 point if the Lizard is dead.
 *     - The author scores 3 points if Zoe and the Lizard are friends.
 * (6) The original domain had several examples of actions causing characters
 *     to adopt goals (e.g. when a character is stunned, they want not to be
 *     stunned). This domain attempts to translate those goals into utility
 *     functions like so:
 *     - If a character is dead, their utility is 0.
 *     - If a character is healthy (i.e. not stunned) +1 to utility.
 *     - If a character is at a safe location, +1 to utility.
 *     - If a character c1 is friends with c2 (i.e. relationship(c1, c2) == 1)
 *       then c1 gets +1 per friend. Characters become friends via the
 *       make_peace action.
 *     - If a character c1 has an enemy c2 (i.e. relationship(c1, c2) == -1)
 *       then c1 gets -1 per enemy. A character becomes the enemy of a
 *       guardian when they are at the location guarded by that guardian.
 *     - Friend and enemy relationships end if either character dies.
 * (7) The story used in the original experiment by Ware et al. is a valid
 *     sequence of actions in this version, but it is not considered a solution
 *     because of Sabre's minimality constraint. The interactions between Zoe
 *     and the Lizard can be removed (making the plan shorter) without
 *     decreasing the author's utility.
 *
 * Shortest solution for author utility 1 (author temporal limit 2; character
 * temporal limit 0; epistemic limit 0):
 *   begin_erupt(Surface)
 *   erupt(Surface)
 *
 * Shortest solution for author utility 2 (author temporal limit 3; character
 * temporal limit 3; epistemic limit 1):
 *   teleport_from_ship(Zoe, Ship, Surface)
 *   begin_erupt(Surface)
 *   erupt(Surface)
 *
 * Shortest solution for author utility 3 (author temporal limit 3; character
 * temporal limit 3; epistemic limit 1):
 *   teleport_from_ship(Zoe, Ship, Surface)
 *   walk(Zoe, Surface, Cave)
 *   make_peace(Zoe, Lizard, Cave)
 *
 * Shortest solution for author utility 4 (author temporal limit 5; character
 * temporal limit 3; epistemic limit 1):
 *   teleport_from_ship(Zoe, Ship, Surface)
 *   walk(Zoe, Surface, Cave)
 *   make_peace(Zoe, Lizard, Cave)
 *   begin_erupt(Surface)
 *   erupt(Surface)
 *
 * Shortest solution for author utility 5 (author temporal limit 6; character
 * temporal limit 3; epistemic limit 1):
 *   teleport_from_ship(Zoe, Ship, Surface)
 *   walk(Lizard, Cave, Surface)
 *   make_peace(Zoe, Lizard, Surface)
 *   begin_erupt(Surface)
 *   teleport_to_ship(Zoe, Surface, Ship)
 *   erupt(Surface)
 *
 * The solution used in the study by Ware et al. which is not a solution in
 * Sabre because it is not minimal (author utility 1; author temporal limit 9;
 * character temporal limt 3; epistemic limit 1):
 *   teleport_from_ship(Zoe, Ship, Surface)
 *   walk(Lizard, Cave, Surface)
 *   attack(Lizard, Zoe, Surface)
 *   stun(Zoe, Lizard, Surface)
 *   begin_erupt(Surface)
 *   teleport_to_ship(Zoe, Surface, Ship)
 *   break_free(Lizard, Surface)
 *   walk(Lizard, Surface, Cave)
 *   erupt(Surface)
 *
 * The preferred citation for the origin of this domain is:
 *   Stephen G. Ware, R. Michael Young, Brent Harrison, David L. Roberts, "A
 *   computational model of narrative conflict at the fabula level," in IEEE
 *   Transactions on Computational Intelligence and Artificial Intelligence in
 *   Games, vol. 6, num. 3, pp. 271-288, 2014.
 */

type place;
type ship : place;
type landform : place;
type character_status;
type land_status;
type time;

property path(first : place, second : place) : boolean;
property status(place : place) : land_status;
property captain(character : character, ship : ship) : boolean;
property guardian(character : character, landform : landform) : boolean;
property status(character : character) : character_status;
property at(character : character) : place;
property safe(character : character) : boolean;
property fighting(first : character, second : character) : boolean;
property relationship(first : character, second : character) : number;

entity Zoe : character;
entity Lizard : character;
entity Ship : ship;
entity Cave : place;
entity Surface : landform;
entity Safe : land_status;
entity Dangerous : land_status;
entity Uninhabitable : land_status;
entity Healthy : character_status;
entity Stunned : character_status;
entity Dead : character_status;

path(Surface, Cave);
path(Cave, Surface);
status(Ship) = Safe;
status(Cave) = Safe;
status(Surface) = Safe;
captain(Zoe, Ship);
status(Zoe) = Healthy;
at(Zoe) = Ship;
guardian(Lizard, Surface);
status(Lizard) = Healthy;
at(Lizard) = Cave;
believes(Zoe, !guardian(Lizard, Surface));

action teleport_from_ship(character : character, from : ship, to : landform) {
	precondition:
		from != to &
		captain(character, from) &
		status(character) == Healthy &
		at(character) == from;
	effect:
		at(character) = to;
	consenting: character;
	observing(c : character): status(c) != Dead & (at(c) == from | at(c) == to | guardian(c, to));
};

action teleport_to_ship(character : character, from : landform, to : ship) {
	precondition:
		from != to &
		captain(character, to) &
		status(character) == Healthy &
		at(character) == from;
	effect:
		at(character) = to;
	consenting: character;
	observing(c : character): status(c) != Dead & (at(c) == from | at(c) == to);
};

action walk(character : character, from : place, to : place) {
	precondition:
		path(from, to) &
		status(character) == Healthy &
		at(character) == from;
	effect:
		at(character) = to;
	consenting: character;
	observing(c : character): status(c) != Dead & (at(c) == from | at(c) == to);
};

action attack(attacker : character, victim : character, place : place) {
	precondition:
		attacker != victim &
		status(attacker) == Healthy &
		at(attacker) == place &
		status(victim) == Healthy &
		at(victim) == place &
		!fighting(attacker, victim);
	effect:
		fighting(attacker, victim) &
		fighting(victim, attacker) &
		relationship(attacker, victim) = -1 &
		relationship(victim, attacker) = -1;
	consenting: attacker;
	observing(c : character): status(c) != Dead & at(c) == place;
};

action stun(stunner : character, victim : character, place : place) {
	precondition:
		status(stunner) == Healthy &
		at(stunner) == place &
		status(victim) == Healthy &
		at(victim) == place &
		fighting(stunner, victim);
	effect:
		status(victim) = Stunned;
	consenting: stunner;
	observing(c : character): status(c) != Dead & at(c) == place;
};

action kill(killer : character, victim : character, place : place) {
	precondition:
		status(killer) == Healthy &
		at(killer) == place &
		status(victim) != Dead &
		at(victim) == place &
		fighting(killer, victim);
	effect:
		status(victim) = Dead;
	consenting: killer;
	observing(c : character): status(c) != Dead & at(c) == place;
};

action break_free(character : character, place : place) {
	precondition:
		status(character) == Stunned &
		at(character) == place;
	effect:
		status(character) = Healthy;
	consenting: character;
	observing(c : character): status(c) != Dead & at(c) == place;
};

action make_peace(peacemaker : character, other : character, place : place) {
	precondition:
		peacemaker != other &
		status(peacemaker) == Healthy &
		at(peacemaker) == place &
		status(other) != Dead &
		at(other) == place &
		!fighting(peacemaker, other);
	effect:
		relationship(peacemaker, other) = 1 &
		relationship(other, peacemaker) = 1;
	consenting: peacemaker, other;
	observing(c : character): status(c) != Dead & at(c) == place;
};

action begin_erupt(place : landform) {
	precondition:
		status(place) == Safe;
	effect:
		status(place) = Dangerous;
	observing(c : character): status(c) != Dead & at(c) == place;
};

action erupt(place : landform) {
	precondition:
		status(place) == Dangerous;
	effect:
		status(place) = Uninhabitable;
	observing(c : character): status(c) != Dead & at(c) == place;
};

trigger see_status(character : character, place : place, status : land_status) {
	precondition:
		status(character) != Dead &
		at(character) == place &
		status(place) == status &
		believes(character, status(place) != status);
	effect:
		believes(character, status(place) = status);
};

trigger see_status(character : character, other : character, status : character_status, place : place) {
	precondition:
		status(character) != Dead &
		at(character) == place &
		status(other) == status &
		at(character) == place &
		believes(character, status(other) != status);
	effect:
		believes(character, status(other) = status);
};

trigger die(character : character, place : landform) {
	precondition:
		status(place) == Uninhabitable &
		status(character) != Dead &
		at(character) == place;
	effect:
		status(character) = Dead;
};

trigger see_at(character : character, other : character, place : place) {
	precondition:
		status(character) != Dead &
		at(character) == place &
		at(other) == place &
		believes(character, at(other) != place);
	effect:
		believes(character, at(other) = place);
};

trigger see_not_at(character : character, other : character, place : place) {
	precondition:
		status(character) != Dead &
		at(character) == place &
		at(other) != place &
		believes(character, at(other) == place);
	effect:
		believes(character, at(other) = ?);
};

trigger safe(character : character, place : place) {
	precondition:
		status(place) == Safe &
		status(character) != Dead &
		at(character) == place &
		!safe(character);
	effect:
		safe(character);
};

trigger unsafe(character : character, place : place) {
	precondition:
		status(place) != Safe &
		at(character) == place &
		safe(character);
	effect:
		!safe(character);
};

trigger end_fight(character : character, other : character) {
	precondition:
		(
			status(character) != Healthy |
			status(other) != Healthy |
			at(character) != at(other)
		) &
		fighting(character, other);
	effect:
		!fighting(character, other);
};

trigger anger_guardian(character : character, guardian : character, place : landform) {
	precondition:
		!guardian(character, place) &
		status(character) != Dead &
		at(character) == place &
		guardian(guardian, place) &
		status(guardian) != Dead &
		relationship(guardian, character) == 0;
	effect:
		relationship(guardian, character) = -1;
};

trigger end_relationship(character : character, other : character) {
	precondition:
		status(character) == Dead &
		relationship(character, other) != 0;
	effect:
		relationship(character, other) = 0;
};

utility():
	(if(status(Surface) == Uninhabitable) 1 else 0) +
	(if(status(Zoe) == Dead) 1 else 0) +
	(if(status(Lizard) == Dead) 1 else 0) +
	(if(relationship(Zoe, Lizard) > 0) 3 else 0);

utility(Zoe):
	if(status(Zoe) == Dead)
		0
	else
		(if(status(Zoe) == Healthy) 1 else 0) +
		(if(safe(Zoe)) 1 else 0) +
		(sum(c : character) relationship(Zoe, c));

utility(Lizard):
	if(status(Lizard) == Dead)
		0
	else
		(if(status(Lizard) == Healthy) 1 else 0) +
		(if(safe(Lizard)) 1 else 0) +
		(sum(c : character) relationship(Lizard, c));